
kill = {};

kill.parser = (function() {
    /*
     * Generated by PEG.js 0.8.0.
     *
     * http://pegjs.majda.cz/
     */

    function peg$subclass(child, parent) {
        function ctor() { this.constructor = child; }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
    }

    function SyntaxError(message, expected, found, offset, line, column) {
        this.message  = message;
        this.expected = expected;
        this.found    = found;
        this.offset   = offset;
        this.line     = line;
        this.column   = column;

        this.name     = "SyntaxError";
    }

    peg$subclass(SyntaxError, Error);

    function parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},

            peg$FAILED = {},

            peg$startRuleFunctions = { start: peg$parsestart },
            peg$startRuleFunction  = peg$parsestart,

            peg$c0 = "'",
            peg$c1 = { type: "literal", value: "'", description: "\"'\"" },
            peg$c2 = "let",
            peg$c3 = { type: "literal", value: "let", description: "\"let\"" },
            peg$c4 = "if",
            peg$c5 = { type: "literal", value: "if", description: "\"if\"" },
            peg$c6 = "then",
            peg$c7 = { type: "literal", value: "then", description: "\"then\"" },
            peg$c8 = "else",
            peg$c9 = { type: "literal", value: "else", description: "\"else\"" },
            peg$c10 = "begin",
            peg$c11 = { type: "literal", value: "begin", description: "\"begin\"" },
            peg$c12 = "end",
            peg$c13 = { type: "literal", value: "end", description: "\"end\"" },
            peg$c14 = "set!",
            peg$c15 = { type: "literal", value: "set!", description: "\"set!\"" },
            peg$c16 = "in",
            peg$c17 = { type: "literal", value: "in", description: "\"in\"" },
            peg$c18 = "for",
            peg$c19 = { type: "literal", value: "for", description: "\"for\"" },
            peg$c20 = "--",
            peg$c21 = { type: "literal", value: "--", description: "\"--\"" },
            peg$c22 = ":=",
            peg$c23 = { type: "literal", value: ":=", description: "\":=\"" },
            peg$c24 = "->",
            peg$c25 = { type: "literal", value: "->", description: "\"->\"" },
            peg$c26 = "(",
            peg$c27 = { type: "literal", value: "(", description: "\"(\"" },
            peg$c28 = ")",
            peg$c29 = { type: "literal", value: ")", description: "\")\"" },
            peg$c30 = "[",
            peg$c31 = { type: "literal", value: "[", description: "\"[\"" },
            peg$c32 = "]",
            peg$c33 = { type: "literal", value: "]", description: "\"]\"" },
            peg$c34 = "|",
            peg$c35 = { type: "literal", value: "|", description: "\"|\"" },
            peg$c36 = /^[ \t]/,
            peg$c37 = { type: "class", value: "[ \\t]", description: "[ \\t]" },
            peg$c38 = "\n",
            peg$c39 = { type: "literal", value: "\n", description: "\"\\n\"" },
            peg$c40 = peg$FAILED,
            peg$c41 = [],
            peg$c42 = null,
            peg$c43 = ";;",
            peg$c44 = { type: "literal", value: ";;", description: "\";;\"" },
            peg$c45 = ";",
            peg$c46 = { type: "literal", value: ";", description: "\";\"" },
            peg$c47 = ",",
            peg$c48 = { type: "literal", value: ",", description: "\",\"" },
            peg$c49 = /^[0-9]/,
            peg$c50 = { type: "class", value: "[0-9]", description: "[0-9]" },
            peg$c51 = function(ds) {return parseInt(ds.join(""),10);},
            peg$c52 = /^[_a-zA-Z?!+\-*\/%\^$&]/,
            peg$c53 = { type: "class", value: "[_a-zA-Z?!+\\-*\\/%\\^$&]", description: "[_a-zA-Z?!+\\-*\\/%\\^$&]" },
            peg$c54 = function(id) {
                return ["if", "let", "begin",
                    "then", "else", "set!",
                    "in", "--",  "end",
                    "true", "false", "for",
                ].indexOf(id.join("")) == -1
            },
            peg$c55 = void 0,
            peg$c56 = function(id) { return id.join(""); },
            peg$c57 = "true",
            peg$c58 = { type: "literal", value: "true", description: "\"true\"" },
            peg$c59 = "false",
            peg$c60 = { type: "literal", value: "false", description: "\"false\"" },
            peg$c61 = function(bool) {return bool == "true";},
            peg$c62 = function() {return undefined;},
            peg$c63 = function(stmt, stmts) {return stmt? (stmts ? [stmt].concat(stmts):[stmt])
                : (stmts ? stmts : []);},
            peg$c64 = function(stmts) {return stmts;},
            peg$c65 = function(stmt) {return stmt;},
            peg$c66 = /^[^#\n]/,
            peg$c67 = { type: "class", value: "[^#\\n]", description: "[^#\\n]" },
            peg$c68 = function(cond, then, _else) {return ["if", cond, then, _else]},
            peg$c69 = function(cond) {return cond},
            peg$c70 = function(then) {return then;},
            peg$c71 = function(_else) {return _else;},
            peg$c72 = function(es) { return ["begin"].concat(es);},
            peg$c73 = function(exp, exps) {return exps?[exp].concat(exps):[exp];},
            peg$c74 = function(f) {return f.length&&["list","list_comp"].indexOf(f[0]) > -1?[f]:f;},
            peg$c75 = function(l, rs) { return rs.length? rs.reduce(function(l,r){return [l].concat(r);},l) : [l];},
            peg$c76 = function(let, bs) {return [let, bs];},
            peg$c77 = function(name, exp) {return [name, exp];},
            peg$c78 = function(b, bs) {return bs?[b].concat(bs):[b];},
            peg$c79 = function(bindings) {return bindings;},
            peg$c80 = function(ps, exp) {return ["lambda", ps?[ps]:[], exp];},
            peg$c81 = function(p, exp) {return ["lambda",[p],exp]},
            peg$c82 = function(p, l) {return ["lambda",[p], l]},
            peg$c83 = "\\(",
            peg$c84 = { type: "literal", value: "\\(", description: "\"\\\\(\"" },
            peg$c85 = function(id) {return id;},
            peg$c86 = function(id, ids, exp) {return ["uc_lambda", [id].concat(ids),exp]},
            peg$c87 = function(set, id, exp) {return [set, id, exp];},
            peg$c88 = "\\",
            peg$c89 = { type: "literal", value: "\\", description: "\"\\\\\"" },
            peg$c90 = function(e, es) {return es.length? [e].concat(es): [e];},
            peg$c91 = function(exp) {return ["quote"].concat(exp);},
            peg$c92 = function(l) {return ["list",l];},
            peg$c93 = function(l) {return l;},
            peg$c94 = function(exp, l) {return l?[exp].concat(l):[exp]},
            peg$c95 = function(exp, bind) {return ["list_comp",
                bind,
                bind.slice(0).reverse().reduce(function(a,b){
                    return ["lambda",[b[0]], a];
                },exp)];},
            peg$c96 = function(id, exp, cond) {return cond?[id,[["filter",["lambda",[id], cond]], exp]]:[id, exp]},
            peg$c97 = function(exp) {return exp;},
            peg$c98 = function(i, ins) {return ins ? [i].concat(ins) : [i];},
            peg$c99 = function(ins) {return ins},

            peg$currPos          = 0,
            peg$reportedPos      = 0,
            peg$cachedPos        = 0,
            peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,

            peg$result;

        if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
                throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
            }

            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function text() {
            return input.substring(peg$reportedPos, peg$currPos);
        }

        function offset() {
            return peg$reportedPos;
        }

        function line() {
            return peg$computePosDetails(peg$reportedPos).line;
        }

        function column() {
            return peg$computePosDetails(peg$reportedPos).column;
        }

        function expected(description) {
            throw peg$buildException(
                null,
                [{ type: "other", description: description }],
                peg$reportedPos
            );
        }

        function error(message) {
            throw peg$buildException(message, null, peg$reportedPos);
        }

        function peg$computePosDetails(pos) {
            function advance(details, startPos, endPos) {
                var p, ch;

                for (p = startPos; p < endPos; p++) {
                    ch = input.charAt(p);
                    if (ch === "\n") {
                        if (!details.seenCR) { details.line++; }
                        details.column = 1;
                        details.seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        details.line++;
                        details.column = 1;
                        details.seenCR = true;
                    } else {
                        details.column++;
                        details.seenCR = false;
                    }
                }
            }

            if (peg$cachedPos !== pos) {
                if (peg$cachedPos > pos) {
                    peg$cachedPos = 0;
                    peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
                }
                advance(peg$cachedPosDetails, peg$cachedPos, pos);
                peg$cachedPos = pos;
            }

            return peg$cachedPosDetails;
        }

        function peg$fail(expected) {
            if (peg$currPos < peg$maxFailPos) { return; }

            if (peg$currPos > peg$maxFailPos) {
                peg$maxFailPos = peg$currPos;
                peg$maxFailExpected = [];
            }

            peg$maxFailExpected.push(expected);
        }

        function peg$buildException(message, expected, pos) {
            function cleanupExpected(expected) {
                var i = 1;

                expected.sort(function(a, b) {
                    if (a.description < b.description) {
                        return -1;
                    } else if (a.description > b.description) {
                        return 1;
                    } else {
                        return 0;
                    }
                });

                while (i < expected.length) {
                    if (expected[i - 1] === expected[i]) {
                        expected.splice(i, 1);
                    } else {
                        i++;
                    }
                }
            }

            function buildMessage(expected, found) {
                function stringEscape(s) {
                    function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

                    return s
                        .replace(/\\/g,   '\\\\')
                        .replace(/"/g,    '\\"')
                        .replace(/\x08/g, '\\b')
                        .replace(/\t/g,   '\\t')
                        .replace(/\n/g,   '\\n')
                        .replace(/\f/g,   '\\f')
                        .replace(/\r/g,   '\\r')
                        .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
                        .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
                        .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
                        .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
                }

                var expectedDescs = new Array(expected.length),
                    expectedDesc, foundDesc, i;

                for (i = 0; i < expected.length; i++) {
                    expectedDescs[i] = expected[i].description;
                }

                expectedDesc = expected.length > 1
                    ? expectedDescs.slice(0, -1).join(", ")
                    + " or "
                    + expectedDescs[expected.length - 1]
                    : expectedDescs[0];

                foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

                return "Expected " + expectedDesc + " but " + foundDesc + " found.";
            }

            var posDetails = peg$computePosDetails(pos),
                found      = pos < input.length ? input.charAt(pos) : null;

            if (expected !== null) {
                cleanupExpected(expected);
            }

            return new SyntaxError(
                    message !== null ? message : buildMessage(expected, found),
                expected,
                found,
                pos,
                posDetails.line,
                posDetails.column
            );
        }

        function peg$parsestart() {
            var s0;

            s0 = peg$parsestmts();

            return s0;
        }

        function peg$parset_qt() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 39) {
                s0 = peg$c0;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1); }
            }

            return s0;
        }

        function peg$parset_let() {
            var s0;

            if (input.substr(peg$currPos, 3) === peg$c2) {
                s0 = peg$c2;
                peg$currPos += 3;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
            }

            return s0;
        }

        function peg$parset_if() {
            var s0;

            if (input.substr(peg$currPos, 2) === peg$c4) {
                s0 = peg$c4;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }

            return s0;
        }

        function peg$parset_then() {
            var s0;

            if (input.substr(peg$currPos, 4) === peg$c6) {
                s0 = peg$c6;
                peg$currPos += 4;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }

            return s0;
        }

        function peg$parset_else() {
            var s0;

            if (input.substr(peg$currPos, 4) === peg$c8) {
                s0 = peg$c8;
                peg$currPos += 4;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }

            return s0;
        }

        function peg$parset_begin() {
            var s0;

            if (input.substr(peg$currPos, 5) === peg$c10) {
                s0 = peg$c10;
                peg$currPos += 5;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }

            return s0;
        }

        function peg$parset_end() {
            var s0;

            if (input.substr(peg$currPos, 3) === peg$c12) {
                s0 = peg$c12;
                peg$currPos += 3;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c13); }
            }

            return s0;
        }

        function peg$parset_set() {
            var s0;

            if (input.substr(peg$currPos, 4) === peg$c14) {
                s0 = peg$c14;
                peg$currPos += 4;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }

            return s0;
        }

        function peg$parset_in() {
            var s0;

            if (input.substr(peg$currPos, 2) === peg$c16) {
                s0 = peg$c16;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }

            return s0;
        }

        function peg$parset_for() {
            var s0;

            if (input.substr(peg$currPos, 3) === peg$c18) {
                s0 = peg$c18;
                peg$currPos += 3;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }

            return s0;
        }

        function peg$parset_comment() {
            var s0;

            if (input.substr(peg$currPos, 2) === peg$c20) {
                s0 = peg$c20;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }

            return s0;
        }

        function peg$parsekeywords() {
            var s0;

            s0 = peg$parset_let();
            if (s0 === peg$FAILED) {
                s0 = peg$parset_if();
                if (s0 === peg$FAILED) {
                    s0 = peg$parset_then();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parset_else();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parset_begin();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parset_end();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parset_set();
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$parset_in();
                                        if (s0 === peg$FAILED) {
                                            s0 = peg$parset_for();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return s0;
        }

        function peg$parseop_assign() {
            var s0;

            if (input.substr(peg$currPos, 2) === peg$c22) {
                s0 = peg$c22;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c23); }
            }

            return s0;
        }

        function peg$parseop_arrow() {
            var s0;

            if (input.substr(peg$currPos, 2) === peg$c24) {
                s0 = peg$c24;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c25); }
            }

            return s0;
        }

        function peg$parsebra() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 40) {
                s0 = peg$c26;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }

            return s0;
        }

        function peg$parseket() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 41) {
                s0 = peg$c28;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c29); }
            }

            return s0;
        }

        function peg$parsesqu() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 91) {
                s0 = peg$c30;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }

            return s0;
        }

        function peg$parseare() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 93) {
                s0 = peg$c32;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }

            return s0;
        }

        function peg$parsebar() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 124) {
                s0 = peg$c34;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c35); }
            }

            return s0;
        }

        function peg$parseblank() {
            var s0;

            if (peg$c36.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c37); }
            }

            return s0;
        }

        function peg$parsenewline() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 10) {
                s0 = peg$c38;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }

            return s0;
        }

        function peg$parsebnl() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseblank();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseblank();
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsenewline();
                if (s2 === peg$FAILED) {
                    s2 = peg$c42;
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseblank();
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parseblank();
                    }
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsedelim() {
            var s0;

            if (input.substr(peg$currPos, 2) === peg$c43) {
                s0 = peg$c43;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c44); }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 10) {
                    s0 = peg$c38;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                }
            }

            return s0;
        }

        function peg$parsesemi() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 59) {
                s0 = peg$c45;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }

            return s0;
        }

        function peg$parsesep() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseblank();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseblank();
            }
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                    s2 = peg$c47;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c48); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsenewline();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c42;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parseblank();
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$parseblank();
                        }
                        if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c40;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsedigits() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = [];
            if (peg$c49.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c50); }
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c49.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c50); }
                    }
                }
            } else {
                s1 = peg$c40;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c51(s1);
            }
            s0 = s1;

            return s0;
        }

        function peg$parseidentifier() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = [];
            if (peg$c52.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c52.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c53); }
                    }
                }
            } else {
                s1 = peg$c40;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s2 = peg$c54(s1);
                if (s2) {
                    s2 = peg$c55;
                } else {
                    s2 = peg$c40;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c56(s1);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parseliteral() {
            var s0;

            s0 = peg$parsedigits();
            if (s0 === peg$FAILED) {
                s0 = peg$parsebools();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseunit();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parselist();
                    }
                }
            }

            return s0;
        }

        function peg$parsebools() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c57) {
                s1 = peg$c57;
                peg$currPos += 4;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c58); }
            }
            if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c59) {
                    s1 = peg$c59;
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c60); }
                }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c61(s1);
            }
            s0 = s1;

            return s0;
        }

        function peg$parseunit() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsebra();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblank();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblank();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseket();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c62();
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsestmts() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parsestmt();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsestmt_r();
                if (s2 === peg$FAILED) {
                    s2 = peg$c42;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c63(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsestmt_r() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsedelim();
            if (s1 === peg$FAILED) {
                s1 = peg$c42;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsebnl();
                if (s2 === peg$FAILED) {
                    s2 = peg$c42;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsestmts();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c64(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsestmt() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseblank();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseblank();
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parselet();
                if (s2 === peg$FAILED) {
                    s2 = peg$parseexp();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsecomment();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c42;
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c65(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parsecomment();
            }

            return s0;
        }

        function peg$parsecomment() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseblank();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseblank();
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parset_comment();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    if (peg$c66.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c67); }
                    }
                    if (s4 !== peg$FAILED) {
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            if (peg$c66.test(input.charAt(peg$currPos))) {
                                s4 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c67); }
                            }
                        }
                    } else {
                        s3 = peg$c40;
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c62();
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsenewline();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c62();
                }
                s0 = s1;
            }

            return s0;
        }

        function peg$parseexp() {
            var s0;

            s0 = peg$parseif();
            if (s0 === peg$FAILED) {
                s0 = peg$parsebegin();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseset();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsesquote();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parselexp();
                        }
                    }
                }
            }

            return s0;
        }

        function peg$parselexp() {
            var s0;

            s0 = peg$parselambda();
            if (s0 === peg$FAILED) {
                s0 = peg$parsefexp();
            }

            return s0;
        }

        function peg$parseif() {
            var s0, s1, s2, s3, s4, s5, s6;

            s0 = peg$currPos;
            s1 = peg$parsecond();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsebnl();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsethen();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsebnl();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseelse();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsebnl();
                                if (s6 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c68(s1, s3, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c40;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c40;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c40;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsecond() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parset_if();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblank();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblank();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseexp();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c69(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsethen() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parset_then();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblank();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblank();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseexp();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c70(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parseelse() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parset_else();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblank();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblank();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseexp();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c71(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsebegin() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = peg$parset_begin();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsebnl();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsebeg_exps();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parset_end();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c72(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c40;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsebeg_exps() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parseexp();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblank();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblank();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsesemi();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsebnl();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsebeg_exps();
                            if (s5 === peg$FAILED) {
                                s5 = peg$c42;
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c73(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c40;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c40;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsefexp() {
            var s0, s1, s2, s3, s4, s5, s6;

            s0 = peg$currPos;
            s1 = peg$parseaexp();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblank();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblank();
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$currPos;
                    s5 = [];
                    s6 = peg$parseblank();
                    while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parseblank();
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parseaexp();
                        if (s6 !== peg$FAILED) {
                            peg$reportedPos = s4;
                            s5 = peg$c74(s6);
                            s4 = s5;
                        } else {
                            peg$currPos = s4;
                            s4 = peg$c40;
                        }
                    } else {
                        peg$currPos = s4;
                        s4 = peg$c40;
                    }
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$currPos;
                        s5 = [];
                        s6 = peg$parseblank();
                        while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            s6 = peg$parseblank();
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseaexp();
                            if (s6 !== peg$FAILED) {
                                peg$reportedPos = s4;
                                s5 = peg$c74(s6);
                                s4 = s5;
                            } else {
                                peg$currPos = s4;
                                s4 = peg$c40;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$c40;
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c75(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parseaexp() {
            var s0;

            s0 = peg$parseliteral();
            if (s0 === peg$FAILED) {
                s0 = peg$parseidentifier();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsequote();
                }
            }

            return s0;
        }

        function peg$parselet() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parset_let();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblank();
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseblank();
                    }
                } else {
                    s2 = peg$c40;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsebindings();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c76(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsebinding() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parseidentifier();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblank();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblank();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseop_assign();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsebnl();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseexp();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c77(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c40;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c40;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsebindings() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parsebinding();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsebinding_r();
                if (s2 === peg$FAILED) {
                    s2 = peg$c42;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c78(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsebinding_r() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsesep();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsebnl();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsebindings();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c79(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parselambda() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parseparam();
            if (s1 === peg$FAILED) {
                s1 = peg$c42;
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblank();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblank();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseop_arrow();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsebnl();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseexp();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c80(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c40;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c40;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseparam();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseblank();
                    if (s3 !== peg$FAILED) {
                        while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            s3 = peg$parseblank();
                        }
                    } else {
                        s2 = peg$c40;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseexp();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsesep();
                            if (s4 === peg$FAILED) {
                                s4 = peg$c42;
                            }
                            if (s4 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c81(s1, s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c40;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c40;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseparam();
                    if (s1 !== peg$FAILED) {
                        s2 = [];
                        s3 = peg$parseblank();
                        while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            s3 = peg$parseblank();
                        }
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parselambda();
                            if (s3 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c82(s1, s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c40;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c40;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseuc_lambda();
                    }
                }
            }

            return s0;
        }

        function peg$parseuc_lambda() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c83) {
                s1 = peg$c83;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c84); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseidentifier();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseblank();
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parseblank();
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$currPos;
                        s6 = peg$parsesep();
                        if (s6 === peg$FAILED) {
                            s6 = peg$c42;
                        }
                        if (s6 !== peg$FAILED) {
                            s7 = [];
                            s8 = peg$parseblank();
                            while (s8 !== peg$FAILED) {
                                s7.push(s8);
                                s8 = peg$parseblank();
                            }
                            if (s7 !== peg$FAILED) {
                                s8 = peg$parseidentifier();
                                if (s8 !== peg$FAILED) {
                                    peg$reportedPos = s5;
                                    s6 = peg$c85(s8);
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$c40;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c40;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c40;
                        }
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$currPos;
                            s6 = peg$parsesep();
                            if (s6 === peg$FAILED) {
                                s6 = peg$c42;
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = [];
                                s8 = peg$parseblank();
                                while (s8 !== peg$FAILED) {
                                    s7.push(s8);
                                    s8 = peg$parseblank();
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseidentifier();
                                    if (s8 !== peg$FAILED) {
                                        peg$reportedPos = s5;
                                        s6 = peg$c85(s8);
                                        s5 = s6;
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$c40;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$c40;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c40;
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                                s5 = peg$c28;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c29); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = [];
                                s7 = peg$parseblank();
                                while (s7 !== peg$FAILED) {
                                    s6.push(s7);
                                    s7 = peg$parseblank();
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp();
                                    if (s7 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c86(s2, s4, s7);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c40;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c40;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c40;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c40;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parseset() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parset_set();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblank();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblank();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseidentifier();
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parseblank();
                        if (s5 !== peg$FAILED) {
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parseblank();
                            }
                        } else {
                            s4 = peg$c40;
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseexp();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c87(s1, s3, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c40;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c40;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parseparam() {
            var s0, s1, s2;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c88;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c89); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseidentifier();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c85(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsequote() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = peg$parsebra();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseexp();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseexp();
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parseexp();
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseket();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c90(s2, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c40;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsesquote() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parset_qt();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseexp();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c91(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parselist() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parsesqu();
            if (s1 !== peg$FAILED) {
                s2 = peg$parselist_item();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseare();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c92(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parsecomprehension();
            }

            return s0;
        }

        function peg$parselist_item() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parseexp();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblank();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblank();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$currPos;
                    s4 = peg$parsesep();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parselist_item();
                        if (s5 !== peg$FAILED) {
                            peg$reportedPos = s3;
                            s4 = peg$c93(s5);
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c40;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c40;
                    }
                    if (s3 === peg$FAILED) {
                        s3 = peg$c42;
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c94(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }
            if (s0 === peg$FAILED) {
                s0 = [];
            }

            return s0;
        }

        function peg$parsecomprehension() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

            s0 = peg$currPos;
            s1 = peg$parsesqu();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblank();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblank();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseexp();
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parseblank();
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$parseblank();
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsenewline();
                            if (s5 === peg$FAILED) {
                                s5 = peg$c42;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = [];
                                s7 = peg$parseblank();
                                while (s7 !== peg$FAILED) {
                                    s6.push(s7);
                                    s7 = peg$parseblank();
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsebar();
                                    if (s7 !== peg$FAILED) {
                                        s8 = [];
                                        s9 = peg$parseblank();
                                        while (s9 !== peg$FAILED) {
                                            s8.push(s9);
                                            s9 = peg$parseblank();
                                        }
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parsein_bindings();
                                            if (s9 !== peg$FAILED) {
                                                s10 = [];
                                                s11 = peg$parseblank();
                                                while (s11 !== peg$FAILED) {
                                                    s10.push(s11);
                                                    s11 = peg$parseblank();
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parseare();
                                                    if (s11 !== peg$FAILED) {
                                                        peg$reportedPos = s0;
                                                        s1 = peg$c95(s3, s9);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c40;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c40;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c40;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c40;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c40;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c40;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c40;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c40;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsein_binding() {
            var s0, s1, s2, s3, s4, s5, s6;

            s0 = peg$currPos;
            s1 = peg$parseidentifier();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblank();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblank();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsein_exp();
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parseblank();
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$parseblank();
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsecond();
                            if (s5 === peg$FAILED) {
                                s5 = peg$c42;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsebnl();
                                if (s6 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c96(s1, s3, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c40;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c40;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c40;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsein_exp() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parset_in();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblank();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblank();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseexp();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c97(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsein_bindings() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parsein_binding();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsein_binding_r();
                if (s2 === peg$FAILED) {
                    s2 = peg$c42;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c98(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        function peg$parsein_binding_r() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
                s1 = peg$c47;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c48); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsebnl();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsein_bindings();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c99(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c40;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c40;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c40;
            }

            return s0;
        }

        peg$result = peg$startRuleFunction();

        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
        } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                peg$fail({ type: "end", description: "end of input" });
            }

            throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
        }
    }

    return {
        SyntaxError: SyntaxError,
        parse:       parse
    };
})();